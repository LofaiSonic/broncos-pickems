name: Deploy to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          server/package-lock.json
          client/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        cd ..
    
    - name: Run tests (if any)
      run: |
        # Add test commands here when tests are available
        echo "No tests configured yet"
    
    - name: Build client
      run: |
        cd client
        npm run build
        cd ..
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to VPS
      run: |
        # Create deployment script
        cat << 'EOF' > deploy.sh
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment to VPS..."
        
        # Navigate to existing project directory
        echo "üìÅ Navigating to project directory..."
        cd /root/NFLwithClaude
        
        # Backup current deployment
        echo "üì¶ Creating backup..."
        cp -r . /root/backup-$(date +%Y%m%d-%H%M%S) || true
        
        # Pull latest changes
        echo "üì• Pulling latest changes..."
        git fetch origin
        git reset --hard origin/master
        
        # Update environment files for production
        echo "‚öôÔ∏è  Updating environment configuration..."
        
        # Create production environment file
        cat << 'ENVEOF' > server/.env.production
        NODE_ENV=production
        PORT=5000
        DB_HOST=broncos-pickems-db
        DB_PORT=5432
        DB_NAME=broncos_pickems
        DB_USER=postgres
        DB_PASSWORD=broncos2025!
        REDIS_URL=redis://broncos-pickems-redis:6379
        JWT_SECRET=your-super-secret-jwt-key-for-production-change-this
        REDDIT_CLIENT_ID=rBkjc74Jhi2u7pFWuBlqWA
        REDDIT_CLIENT_SECRET=YfdhXXw85hTfJKk5nhGj1NNCFv92Gg
        REDDIT_REDIRECT_URI=http://148.230.83.37:5000/api/auth/reddit/callback
        REDDIT_USER_AGENT=BroncosPickemsLeague/1.0
        CLIENT_URL=http://148.230.83.37:3000
        FRONTEND_URL=http://148.230.83.37:3000
        ENVEOF
        
        # Update client environment for production
        cat << 'ENVEOF' > client/.env.production
        REACT_APP_API_URL=http://148.230.83.37:5000
        REACT_APP_FRONTEND_URL=http://148.230.83.37:3000
        ENVEOF
        
        # Update docker-compose.yml for production environment variables
        echo "üîß Updating docker-compose.yml for production..."
        cp docker-compose.yml docker-compose.yml.backup
        
        # Update backend environment variables
        sed -i 's|REDDIT_REDIRECT_URI=http://localhost:5000/api/auth/reddit/callback|REDDIT_REDIRECT_URI=http://148.230.83.37:5000/api/auth/reddit/callback|g' docker-compose.yml
        sed -i 's|CLIENT_URL=http://localhost:3000|CLIENT_URL=http://148.230.83.37:3000|g' docker-compose.yml
        sed -i 's|NODE_ENV=development|NODE_ENV=production|g' docker-compose.yml
        
        # Update frontend environment variables
        sed -i 's|REACT_APP_API_URL=http://localhost:5000|REACT_APP_API_URL=http://148.230.83.37:5000|g' docker-compose.yml
        
        # Rebuild only application containers, keep database and redis running
        echo "üîÑ Rebuilding application containers with latest code..."
        
        # Stop only backend and frontend containers (keep postgres and redis running)
        docker stop broncos-pickems-backend broncos-pickems-frontend || true
        docker rm broncos-pickems-backend broncos-pickems-frontend || true
        
        # Build new images for backend and frontend
        docker-compose build backend frontend
        
        # Start only the application containers (backend and frontend)
        # Use --no-deps to prevent starting dependencies (postgres/redis)
        docker-compose up -d --no-deps backend frontend
        
        # Skip database migrations in production deployment
        echo "üóÉÔ∏è  Skipping database migrations (production safety)"
        
        # Wait for services to be ready
        echo "‚è≥ Waiting for services to start..."
        sleep 30
        
        # Health check
        echo "üè• Performing health checks..."
        backend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/ || echo "000")
        frontend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
        
        if [[ "$backend_status" == "200" ]] && [[ "$frontend_status" == "200" ]]; then
          echo "‚úÖ Deployment successful! Backend: $backend_status, Frontend: $frontend_status"
          
          # Log successful deployment
          echo "$(date): Deployment successful - commit $(git rev-parse --short HEAD)" >> /root/deployment.log
        else
          echo "‚ùå Health check failed! Backend: $backend_status, Frontend: $frontend_status"
          echo "$(date): Deployment failed - commit $(git rev-parse --short HEAD)" >> /root/deployment.log
          exit 1
        fi
        
        echo "üéâ Deployment completed successfully!"
        EOF
        
        # Make script executable and run it
        chmod +x deploy.sh
        
        # Copy deployment script to VPS and execute
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deploy.sh root@${{ secrets.VPS_HOST }}:/root/deploy.sh
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} 'chmod +x /root/deploy.sh && /root/deploy.sh'
    
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Deployment to VPS completed successfully!"
        echo "üåê Frontend: http://${{ secrets.VPS_HOST }}:3000"
        echo "üîß Backend: http://${{ secrets.VPS_HOST }}:5000"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed! Check the logs above for details."
        exit 1